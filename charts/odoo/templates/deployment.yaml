#################################
#             Odoo              #
#################################
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Values.environment.prefix }}-{{ .Values.environment.odoo.configMap.name }}"
  namespace: {{ .Values.resources.namespace }}
data:
  odoo.conf: |
    [options]
    db_host = {{ .Values.environment.postgres.hostname }}
    db_port = {{ .Values.environment.postgres.port }}
    db_name = {{ .Values.environment.postgres.databaseName }}
    db_user = {{ .Values.environment.postgres.username }}
    db_password = {{ .Values.environment.postgres.password }}
    db_sslmode = prefer
    dbfilter = 
    list_db = False
    db_template = template1
    data_dir = /var/lib/odoo/{{ .Values.environment.prefix | trim }}
    
    # Connection options
    workers = 2
    max_cron_threads = 1
    limit_memory_hard = 1677721600
    limit_memory_soft = 629145600
    limit_request = 8192
    limit_time_cpu = 240
    limit_time_real = 352
    limit_time_real_cron = 2400
    gevent_port = 8072

    # Demo Data options
    without_demo = all

    # HTTP options
    proxy_mode = True
---
apiVersion: v1
kind: PersistentVolume
metadata:
  annotations:
    pv.kubernetes.io/provisioned-by: file.csi.azure.com
  name: "{{ .Values.environment.prefix }}-{{ .Values.environment.odoo.persistentVolume.name }}"
  namespace: {{ .Values.resources.namespace }}
spec:
  capacity:
    storage: {{ .Values.environment.odoo.persistentVolume.storageCapacity }}
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: azurefile-csi-premium
  csi:
    driver: file.csi.azure.com
    volumeHandle: "{{- printf "%s#%s#%s###%s" .Values.resources.groupName .Values.resources.storageAccount.name .Values.environment.odoo.persistentVolume.nfsFileShareName .Values.resources.namespace -}}"
    volumeAttributes:
      protocol: nfs
      storageAccount: {{ .Values.resources.storageAccount.name }}
      shareName: {{ .Values.environment.odoo.persistentVolume.nfsFileShareName }}
      server: {{ .Values.resources.storageAccount.name }}.file.core.windows.net
    nodeStageSecretRef:
      name: azure-file-credentials
      namespace: {{ .Values.resources.namespace }}
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: "{{ .Values.environment.prefix }}-{{ .Values.environment.odoo.persistentVolumeClaim.name }}"
  namespace: {{ .Values.resources.namespace }}
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: {{ .Values.environment.odoo.persistentVolume.storageCapacity }}
  volumeName: "{{ .Values.environment.prefix }}-{{ .Values.environment.odoo.persistentVolume.name }}"
  storageClassName: azurefile-csi-premium
  volumeMode: Filesystem
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Values.environment.prefix }}-{{ .Values.environment.odoo.deployment.name }}"
  namespace: {{ .Values.resources.namespace }}
spec:
  replicas: {{ .Values.environment.odoo.deployment.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.environment.prefix }}-odoo
  template:
    metadata:
      labels:
        app: {{ .Values.environment.prefix }}-odoo
        vertical-autoscaling-enable: {{ quote .Values.environment.odoo.deployment.vpa.enable }}
    spec:
      containers:
      - name: "{{ .Values.environment.prefix }}-{{ .Values.environment.odoo.deployment.container.name }}"
        image: "{{ .Values.environment.odoo.deployment.container.imageName }}:{{ .Values.environment.odoo.deployment.container.imageTag }}"
        imagePullPolicy: Always
        resources:
          requests:
            memory: {{ .Values.environment.odoo.deployment.container.requests.memory }}
            cpu: {{ .Values.environment.odoo.deployment.container.requests.cpu }}
          limits:
            memory: {{ .Values.environment.odoo.deployment.container.limits.memory }}
            cpu: {{ .Values.environment.odoo.deployment.container.limits.cpu }}
        ports:
        - containerPort: 8069
        env:
          - name: HOST
            value: "{{ .Values.environment.postgres.hostname }}"
          - name: PORT
            value: {{ quote .Values.environment.postgres.port }}
          - name: USER
            value: {{ .Values.environment.postgres.username }}
          - name: PASSWORD
            value: {{ .Values.environment.postgres.password }}
          - name: DATABASE_NAME
            value: {{ .Values.environment.prefix }}
          - name: ODOO_INITIAL_MODULES
            value: {{ .Values.environment.odoo.modulesToInstall }}
          - name: ODOO_EDITION
            value: "{{ .Values.environment.odoo.edition }}"
          - name: ODOO_ENVIRONMENT
            value: "{{ .Values.environment.odoo.appEnvironment }}"
          - name: MAX_RETRIES
            value: "{{ .Values.environment.odoo.maxRetries }}"
          - name: SLEEP_TIME
            value: "{{ .Values.environment.odoo.sleepTime }}"
        volumeMounts:
          - mountPath: "/var/lib/odoo"
            name: {{ .Values.environment.prefix }}-odoo-data-v
            readOnly: false
          - mountPath: "/etc/odoo/"
            name: {{ .Values.environment.prefix }}-odoo-config-v
            readOnly: false
      volumes:
        - name: {{ .Values.environment.prefix }}-odoo-data-v
          persistentVolumeClaim:
            claimName: "{{ .Values.environment.prefix }}-{{ .Values.environment.odoo.persistentVolumeClaim.name }}"
        - name: {{ .Values.environment.prefix }}-odoo-config-v
          configMap:
            name: "{{ .Values.environment.prefix }}-{{ .Values.environment.odoo.configMap.name }}"
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Values.environment.prefix }}-{{ .Values.environment.odoo.service.name }}"
  namespace: {{ .Values.resources.namespace }}
spec:
  type: ClusterIP
  selector:
    app: {{ .Values.environment.prefix }}-odoo
  ports:
  - name: http-port
    port: {{ .Values.environment.odoo.service.port }}
    targetPort: 8069
  - name: gevent-port
    port: {{ .Values.environment.odoo.service.geventPort }}
    targetPort: 8072
---
#################################
#       Ingress resource       #
#################################
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: "{{ .Values.environment.prefix }}-{{ .Values.environment.odoo.ingress.name }}"
  namespace: {{ .Values.resources.namespace }}
  labels:
    app: {{ .Values.environment.prefix }}-odoo
    chart: "{{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
  annotations:
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "{{ .Values.environment.odoo.ingress.proxyConnectTimeout }}"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "{{ .Values.environment.odoo.ingress.proxyReadTimeout }}"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "{{ .Values.environment.odoo.ingress.proxySendTimeout }}"
    nginx.ingress.kubernetes.io/proxy-body-size: "{{ .Values.environment.odoo.ingress.clientMaxBodySize }}"
spec:
  ingressClassName: {{ .Values.environment.odoo.ingress.className }}
  tls:
    - hosts:
        - {{ .Values.environment.odoo.ingress.host }}
      secretName: {{ .Values.environment.odoo.ingress.tls.secretName }}
  rules:
    - host: {{ .Values.environment.odoo.ingress.host }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service: 
                name: "{{ .Values.environment.prefix }}-{{ .Values.environment.odoo.service.name }}"
                port:
                  number: {{ .Values.environment.odoo.service.port }}
          {{ if eq .Values.environment.odoo.version "13.0" }}
          - path: /longpolling
            pathType: Prefix
            backend:
              service:
                name: "{{ .Values.environment.prefix }}-{{ .Values.environment.odoo.service.name }}"
                port:
                  number: {{ .Values.environment.odoo.service.geventPort }}
          {{ else }}
          - path: /websocket
            pathType: Prefix
            backend:
              service:
                name: "{{ .Values.environment.prefix }}-{{ .Values.environment.odoo.service.name }}"
                port:
                  number: {{ .Values.environment.odoo.service.geventPort }}
          {{ end }}
{{ if eq .Values.environment.odoo.deployment.vpa.enable "true" }}
---
####################################
#       Vertical Autoscaling       #
####################################
apiVersion: "autoscaling.k8s.io/v1"
kind: VerticalPodAutoscaler
metadata:
  name: "{{ .Values.environment.prefix }}-vpa"
  namespace: {{ .Values.resources.namespace }}
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: "{{ .Values.environment.prefix }}-{{ .Values.environment.odoo.deployment.name }}"
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
      - containerName: '*'
        mode: "Auto"
        maxAllowed:
          memory: {{ .Values.environment.odoo.deployment.vpa.maxAllowed.memory }}
          cpu: {{ .Values.environment.odoo.deployment.vpa.maxAllowed.cpu }}
        controlledResources: [ "cpu", "memory" ]
{{ end }}